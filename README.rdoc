= MonkeyPatch

This project is a little big special, in that it's value is as much in the libraries it proposes, than in the documentation that accompanies it. This is why most documentation is linked to the generated documentation of the code, and why I can't stress you more than to read it troughfully.

With power comes responsability, and ruby gives you a lot of power. Follow the MonkeyPatch link to read more about the wisdom you could use when extanding and fixing objects that are external to your code.

Cheers,
  zimbatm

== Goals

* make monkeypatching explicit
* add some checks to make it more safe
* make it easy to use

== Usage

Example usage:

  :include:example/patch_usage.rb

== Related projects

* http://github.com/coderrr/monkey_shield/ : provides sorts of namespaces to avoid patch collision

== Ideas

* method re-definition or module/class extension could be detected, especially when using Gems. The load-path is not the same between the original definition and the new-one.
* having the monkeypatch gem as a dependency indicates that you're extending the core.
* load-path as namespace

== TODO

* Build gem
* Add programmable patching conditions
* Add reason string
* Cleanup the doc
* Add 'monkeywarn' that warns when a monkeypatch is applied
